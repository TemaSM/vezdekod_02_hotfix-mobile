# This is a basic workflow to help you get started with Actions

name: Java CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v2.x

      - name: Set current date as env variable
        run: echo "::set-env name=NOW::$(date +'%F_%H-%M-%S')"

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          architecture: x64

      - name: Cache Gradle packages and build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ./build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle not running tests
        run: ./gradlew build -x test --configure-on-demand
      
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-release-unsigned_${{ env.NOW }}.apk
          path: ./app/build/outputs/apk/release/app-release-unsigned.apk
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ci-release-unsigned-${{ env.NOW }}
          release_name: "[CI] Release (unsigned) / ${{ env.GITHUB_REF_SLUG }} / ${{ env.NOW }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./app/build/outputs/apk/release/app-release-unsigned.apk
          asset_name: app-release-unsigned_${{ env.NOW }}.apk
          asset_content_type: application/vnd.android.package-archive
